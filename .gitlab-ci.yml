image: golang

before_script:
  - export NS_DIR=$GOPATH/src/gitlab.com/$CI_PROJECT_NAMESPACE
  - export PROJ_DIR=$NS_DIR/$CI_PROJECT_NAME
  - mkdir -p $NS_DIR
  - ln -s $CI_PROJECT_DIR $PROJ_DIR
  - cd $PROJ_DIR
  - go get ./...

stages:
  - test
  - deploy

test race:
  stage: test
  script:
    - go build --race ./cmd/...

test integration:
  stage: test
  script:
    - go test ./test/... -cover

deploy downloads:
  stage: deploy
  artifacts:
    paths:
      - download/

  script:
    - mkdir download

    - GOOS=linux GOARCH=386 go build -o bin/${CI_PROJECT_NAME} ./cmd/...
    - tar -czf download/httprelay_linux_386.tar.gz -C bin .
    - rm -r bin

    - GOOS=linux GOARCH=amd64 go build -o bin/${CI_PROJECT_NAME} ./cmd/...
    - tar -czf download/httprelay_linux_amd64.tar.gz -C bin .
    - rm -r bin

    - GOOS=linux GOARCH=arm go build -o bin/${CI_PROJECT_NAME} ./cmd/...
    - tar -czf download/httprelay_linux_arm.tar.gz -C bin .
    - rm -r bin

    - GOOS=linux GOARCH=arm64 go build -o bin/${CI_PROJECT_NAME} ./cmd/...
    - tar -czf download/httprelay_linux_arm64.tar.gz -C bin .
    - rm -r bin

    - GOOS=windows GOARCH=amd64 go build -o bin/${CI_PROJECT_NAME}.exe ./cmd/...
    - tar -czf download/httprelay_windows_arm64.tar.gz -C bin .
    - rm -r bin

    - GOOS=darwin GOARCH=amd64 go build -o bin/${CI_PROJECT_NAME} ./cmd/...
    - tar -czf download/httprelay_macosx_arm64.tar.gz -C bin .
    - rm -r bin

deploy docker:
  stage: deploy

  script:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o docker/${CI_PROJECT_NAME} ./cmd/...
    - echo "nobody:x:65534:65534:Nobody:/:" > docker/passwd
    - docker build -t httprelay .